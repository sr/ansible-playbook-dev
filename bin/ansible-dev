#!/bin/sh
#/ Usage: ansible-dev args...
#/        ansible-dev setup
set -eu

cd "$(dirname "$0")/.."

# Configure ansible for running this playbook.
: "${ANSIBLE_TRANSPORT:="ssh"}"
: "${ANSIBLE_PIPELINING:="true"}"
: "${ANSIBLE_HOSTS:="$HOME/etc/ansible/inventory.ini"}"
: "${ANSIBLE_ROLES_PATH:="$(pwd)/roles/internal:$(pwd)/roles/vendor"}"
: "${ANSIBLE_VAULT_FILE:="$HOME/etc/ansible/vault.yml"}"
: "${ANSIBLE_VAULT_PASSWORD_FILE:="$HOME/etc/ansible/vault-password"}"
: "${ANSIBLE_PLAYBOOK:="$(pwd)/playbooks/dev.yml"}"

export ANSIBLE_TRANSPORT \
    ANSIBLE_PIPELINING \
    ANSIBLE_HOSTS \
    ANSIBLE_ROLES_PATH \
    ANSIBLE_VAULT_PASSWORD_FILE

if [ "${1:-}" = "setup" ]
then
    ansible-galaxy install --ignore-errors \
        -r roles/requirements.yml -p roles/vendor
else
    # The group_vars need to be in the same directory as the inventory
    # otherwise they aren't loaded. So we copy it inside the playbook
    # directory and then instruct ansible to use our copy instead.
    cp "$ANSIBLE_HOSTS" inventory.ini
    trap 'rm -f inventory.ini' EXIT

    # Copy in the encrypted vault file if it exists.
    test -f "$ANSIBLE_VAULT_FILE" && {
        trap 'rm -f $ANSIBLE_VAULT_FILE' EXIT
        cp "$ANSIBLE_VAULT_FILE" group_vars/dev/vault.yml
    }

    # Execute the playbook locally.
    ansible-playbook -i inventory.ini -c local --diff \
        "$ANSIBLE_PLAYBOOK" "$@"
fi
